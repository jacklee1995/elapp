// vite.config.ts
import VueMacros from "file:///E:/documents/GitHub/electron-vite-ts-app/node_modules/.pnpm/unplugin-vue-macros@0.11.2_vite@3.2.5+vue@3.2.45/node_modules/unplugin-vue-macros/dist/vite.mjs";
import Vue from "file:///E:/documents/GitHub/electron-vite-ts-app/node_modules/.pnpm/@vitejs+plugin-vue@3.2.0_vite@3.2.5+vue@3.2.45/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import VueJsx from "file:///E:/documents/GitHub/electron-vite-ts-app/node_modules/.pnpm/@vitejs+plugin-vue-jsx@2.1.1_vite@3.2.5+vue@3.2.45/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import path2 from "node:path";
import { defineConfig, loadEnv } from "file:///E:/documents/GitHub/electron-vite-ts-app/node_modules/.pnpm/vite@3.2.5_ovmyjmuuyckt3r3gpaexj2onji/node_modules/vite/dist/node/index.js";

// ../nodetools/project.ts
import path from "path";
var __vite_injected_original_dirname = "E:\\documents\\GitHub\\electron-vite-ts-app\\process_render\\nodetools";
var BASE_DIR = path.resolve(path.resolve(__vite_injected_original_dirname, "../"), "../");
var ENV_PATH = path.join(BASE_DIR, "VITE_ENVS");
var PUBLIC_DIR = path.join(BASE_DIR, "public");
var BUILD_DIR = path.join(BASE_DIR, "build");
var outBaseDir = path.join(BUILD_DIR, "renders");

// ../nodetools/vite.util.ts
function wrapperEnv(envConf) {
  const res = {};
  for (const envName of Object.keys(envConf)) {
    let realName = envConf[envName].replace(/\\n/g, "\n");
    realName = realName === "true" ? true : realName === "false" ? false : realName;
    if (envName.includes("_PORT")) {
      realName = Number(realName);
    }
    res[envName] = realName;
    if (typeof realName === "string") {
      process.env[envName] = realName;
    } else if (typeof realName === "object") {
      process.env[envName] = JSON.stringify(realName);
    }
  }
  return res;
}

// vite.config.ts
var __vite_injected_original_dirname2 = "E:\\documents\\GitHub\\electron-vite-ts-app\\process_render\\loading";
var outDir = path2.join(outBaseDir, "loading");
var vite_config_default = defineConfig(({ command, mode }) => {
  const env = loadEnv(mode, ENV_PATH, "");
  const viteEnv = wrapperEnv(env);
  const { VITE_RENTER_INDEX_PORT } = viteEnv;
  return {
    plugins: [
      VueMacros({
        setupComponent: false,
        setupSFC: false,
        plugins: {
          vue: Vue(),
          vueJsx: VueJsx()
        }
      })
    ],
    base: "./",
    root: ".",
    envPrefix: "VITE_",
    envDir: ENV_PATH,
    publicDir: PUBLIC_DIR,
    server: {
      host: "127.0.0.1",
      port: VITE_RENTER_INDEX_PORT
    },
    resolve: {
      alias: {
        "@index": path2.resolve(__vite_injected_original_dirname2, "src")
      }
    },
    build: {
      target: "modules",
      outDir,
      assetsDir: "assets",
      sourcemap: false,
      emptyOutDir: true,
      copyPublicDir: true
    },
    define: {
      __APP_ENV__: env.APP_ENV
    },
    logLevel: "info"
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
